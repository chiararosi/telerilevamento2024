#LEZIONE 9 23/04

# How to import external data in R
# 07 importing external data
#finora avevamo un pacchetto che è imageRy che presenta tutti i dati stanno già qua dentro, con im.list() e im.import() abbiamo tutti i dati
#quello che faremo oggi è uscire da R, andare in una cartella del nostro computer, andare dentro la nostra cartella con una funzione ed importare il dato
#possiamo andare su guithub e cercare dentro user ducciorocchini
#scarichiamo l'immagine eclissi presente in telerilevamento di ducciorocchini 
#utilizziamo ora questa immagine eclissi
#importeremo ora questo oggetto, dopo aver salvato questa immagine sul computer
#la prima cosa che c'è da fare è riprendere con library() i pacchetti che ci servono

library(terra)
library(imageRy)

#possiamo usare ora la funzione setwd() ovvero set work directory, spieghiamo al sistema quale è la cartella del nostro computer che useremo per caricare i dati
#per vedere il percorso completo c'è da cliccare il tasto destro e vedere "properties" oppure "proprietà", troviamo il percorso=path
#siccome stiamo uscendo da R perché stiamo spiegando quale è la working directories c'è da usare le virgolette 
setwd("/Users/kiko9/Downloads/file") 

# Importing data from external sources
# make use of slash instead of backslash
# Example: C://Documents/ instead of C:\\Documents\ 
#il blackslash non si deve usare, lo utilizza windows, noi dobbiamo usare lo slash

#adesso possiamo importare l'immagine con il pacchetto terra, in cui ha una funzione che è rast(), serve a creare degli oggetti raster spaziali (sarebbe lo stesso 
#i raster sono la matrice di dati di pixel
#quindi è rast() dell'immagine che abbiamo scaricato
#dobbiamo però vedere come è fatta l'immagine e come si chiama su windows
eclissi <- rast("eclissi.png")
#il warning è perché non è una immagine geolocalizzata quindi non vede l'estensione non in senso informatico ma in senso spaziale
#facciamo un plot di questi immagine
# plotting the data
#con la funzione di imageRy im.plotRGB() 
im.plotRGB(eclissi, 1, 2, 3)
im.plotRGB(eclissi, 3, 2, 1)
im.plotRGB(eclissi, 2, 3, 1)
im.plotRGB(eclissi, 2, 1, 3)
#visualizziamo le immagini modificando le bande in maniera diversa
#questo è il metodo con cui si può andare su qualsiasi sito del pianeta, scaricare l'immagine ed importarla con questo metodo
#con questa immagine possiamo fare quello che ci pare, come una differenza tra le bande
# band difference
dif = eclissi[[1]] - eclissi[[2]]
#eclissi primo livello- eclissi secondo livello, banda rosso- banda verde
plot(dif)
#ho fatto la differenza tra le due bande (che avevamo fatto per creare gli indici spettrali)

# import another image
#importiamo un'altra immagine, andiamo su internet, digitiamo Earth Observatory, è il sito della NASA nel quale ci sono molte immagini
#salviamo l'immagine, salvandola nella stessa cartella di prima 
#lo script data sources di ducciorocchini presenta tutti i siti dove possiamo prendere i dati disponibili
#i dati Sentinel dell'ESA sono immagini a 10 metri ogni 14 giorni, per scaricarli ha messo un video, ci vuole un po' di tempo
#un altro sito è il sito ESA della NASA, possiamo scaricare sia i dati Landsat a 30 metri di risoluzione, sia i dati MODIS a 50 metri e più di risoluzione, il video ci fa vedere come possiamo scaricare questi dati
#l'ultimo sito sempre dell'ESA è Copernicus, c'è una serie di dati disponibili, set per set
#discorso sui dati: 1 step, scaricare l'immagine dal web, sul nostro computer, 2 step salviamo, 3 step setwd(), 4 step usiamo terra, la funzione rast() per importare il dato
#vediamo cosa è Copernicus, su telerilevamento di ducciorocchini c'è una presentazione di copernicus in cui ci fa vedere tutti i dati che sono a disposizione
#NON C'è MAI DA SCRIVERE TROPPO SULLE PRESENTAZIONI
#Copernicus ci fornisce i dati su tante variabili ambientali direttamente relazionate al clima, ai cambiamenti climatici e i loro effetti sulla vegetazione, sul ghiaccio, sull'acqua ecc
#sono 4 principali blocchi di dati più altre due variabili
#c'è la vegetazione, dove ci sono gli indici spettrali, poi l'energia, l'acqua e il ghiaccio. In più ci sono gli hot spots dove ci sono varie variabili e poi c'è il groundbased ovvero i dati della biodiversità
#a noi interessano i primi quattro blocchi perchè sono le immagini del satellite

ocean <- rast("capecod_1984164_lrg.jpg")
im.plotRGB(ocean, 1, 2, 3)
im.plotRGB(ocean, 2, 1, 3)
#wd= work directory definisce il percorso di una certa cartella
# make use of slash instead of backslash
# Example: C://Documents/ instead of C:\\Documents\ 

# read the data
eclissi <- rast("eclissi.png") 
# like i.import in imageRy
# rast() is a function in the terra package
eclissi

# plot the data
im.plotRGB(eclissi  , 1, 2, 3)
im.plotRGB(eclissi, 2, 1, 3)
im.plotRGB(eclissi, 3, 1, 2)

# different methods of plotting
par(mfrow=c(1,2))
im.plotRGB(eclissi, 2, 1, 3)
plotRGB(eclissi, 3, 1, 3)

# band differencing
dif = eclissi[[1]] - eclissi[[2]]

# import another image
# Exercise: import another image from the net!
cratere <- rast("cratere")
im.plotRGB(cratere, 1, 2, 3)
im.plotRGB(cratere, 2, 1, 3)

# importing Copernicus data
soil <- rast("c_gls_SSM1km_202404160000_CEURO_S1CSAR_V1.2.1.nc")
plot(soil)
plot(soil[[1]])

# cropping data
ext <- c(25, 35, 58, 62)
soilcrop <- crop(soil, ext)











# Measuring variability from satellite imagery

library(imageRy)
library(terra)
# install.packages("viridis")
library(viridis)

im.list()

sent <- im.import("sentinel.png")

im.plotRGB(sent, 1, 2, 3)

# NIR = band 1
# red = band 2
# green = band 3

im.plotRGB(sent, r=2, g=1, b=3)

nir <- sent[[1]]
cl <- colorRampPalette(c("red","orange","yellow"))(100)
plot(nir, col=cl)

sd3 <- focal(nir, matrix(1/9, 3, 3), fun=sd)
plot(sd3)

viridisc <- colorRampPalette(viridis(7))(256)
plot(sd3, col=viridisc)

# Standard deviation 7x7
sd7 <- focal(nir, matrix(1/49, 7, 7), fun=sd)
plot(sd7, col=viridisc)

# stack
stacksd <- c(sd3, sd7)
plot(stacksd, col=viridisc)

# Standard deviation 13x13
sd13 <- focal(nir, matrix(1/169, 13, 13), fun=sd)

stacksd <- c(sd3, sd7, sd13)
plot(stacksd, col=viridisc)
